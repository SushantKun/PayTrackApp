@page "/dashboard"

<style>
    .dashboard-card {
        border-radius: 10px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        padding: 20px;
        margin-bottom: 20px;
    }

    .dashboard-header {
        display: flex;
        justify-content: space-between;
    }

    .chart-container {
        height: 300px;
    }

    .transaction-list {
        margin-top: 20px;
    }

    .transaction-item {
        display: flex;
        justify-content: space-between;
        padding: 10px 0;
        border-bottom: 1px solid #eee;
    }
</style>

<div class="container mt-4">
    <h3 style="color:green">Available Balance = @availableBalance</h3>

    <div class="row">
        <div class="col-md-4">
            <div class="dashboard-card bg-success text-white text-center">
                <h5>Total Inflows</h5>
                <h2>@totalIncome</h2>
            </div>
        </div>
        <div class="col-md-4">
            <div class="dashboard-card bg-danger text-white text-center">
                <h5>Total Outflows</h5>
                <h2>@totalExpense</h2>
            </div>
        </div>
        <div class="col-md-4">
            <div class="dashboard-card bg-warning text-white text-center">
                <h5>Total Debt</h5>
                <h2>@totalDebt</h2>
            </div>
        </div>
    </div>

    <div class="d-flex justify-content-end mb-3">
        <button class="btn btn-primary" @onclick="OpenModal">Add Transaction</button>
    </div>

    <div class="row">
        <div class="col-md-6">
            <div class="dashboard-card" style="height: 545px">
                <h5>Financial Overview</h5>
                <div class="chart-container">
                    <MudPaper Class="pa-4">
                        <MudChart ChartType="ChartType.Donut" Width="300px" Height="300px" @bind-SelectedIndex="Index" InputData="@data" InputLabels="@labels"></MudChart>
                    </MudPaper>
                    <MudPaper Class="pa-4 mt-2 d-flex justify-center">
                        <MudButton OnClick="AddDataSize" Variant="Variant.Filled" Color="Color.Primary">Add</MudButton>
                        <MudButton @onclick="RandomizeData" Variant="Variant.Filled" Class="mx-4">Randomize</MudButton>
                        <MudButton OnClick="RemoveDataSize" Variant="Variant.Filled" Color="Color.Secondary">Remove</MudButton>
                    </MudPaper>
                    <MudText Typo="Typo.h6"></MudText>
                    @code {
                        private int Index = -1; //default value cannot be 0 -> first selectedindex is 0.
                        int dataSize = 4;
                        public double[] data = { 50, 25, 20, 5 };
                        public string[] labels = { "Grocery", "Electronics", "Medicine", "Clothing", "Beauty Items" };

                        Random random = new Random();

                        void RandomizeData()
                        {
                            var new_data = new double[dataSize];
                            for (int i = 0; i < new_data.Length; i++)
                                new_data[i] = random.NextDouble() * 100;
                            data = new_data;
                            StateHasChanged();
                        }

                        void AddDataSize()
                        {
                            if (dataSize < 20)
                            {
                                dataSize = dataSize + 1;
                                RandomizeData();
                            }
                        }
                        void RemoveDataSize()
                        {
                            if (dataSize > 0)
                            {
                                dataSize = dataSize - 1;
                                RandomizeData();
                            }
                        }
                    }

                </div>
            </div>
        </div>
        <div class="col-md-6">
            <div class="dashboard-card" style="height: 352px">
                <h5>Top Transactions</h5>
                @*TASK NO 3: Need From and to dates selector to filter data in transactions to show below*@
                <div class="transaction-list">
                    @foreach (var transaction in transactions)
                    {
                        <div class="transaction-item">
                            <span>@transaction.Description</span>
                            <span>@transaction.Date.ToString("yyyy-MM-dd")</span>
                            <span>@transaction.Amount.ToString()</span>
                            <span class="@(transaction.Type == "Income" ? "text-success" : "text-danger")">@transaction.Type</span>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@* Modal for Adding Transaction *@
@if (showModal)
{
    <div class="modal fade show d-block" tabindex="-1" role="dialog">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Add Transaction</h5>
                    <button type="button" class="btn-close" @onclick="CloseModal"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-3">
                        <label>Description</label>
                        <input type="text" class="form-control" @bind="newTransaction.Description" />
                    </div>
                    <div class="mb-3">
                        <label>Date</label>
                        <input type="date" class="form-control" @bind="newTransaction.Date" />
                    </div>
                    <div class="mb-3">
                        <label>Amount</label>
                        <input type="number" class="form-control" @bind="newTransaction.Amount" />
                    </div>
                    <div class="mb-3">
                        <label>Type</label>
                        <select class="form-control" @bind="newTransaction.Type">
                            <option value=""></option>
                            <option value="Income">Income</option>
                            <option value="Expense">Expense</option>
                            <option value="Debt">Debt</option>
                        </select>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseModal">Close</button>
                    <button type="button" class="btn btn-primary" @onclick="AddTransaction">Add</button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

@code {
    //This method is called when the dashboard page is opened
    protected override void OnInitialized()
    {
        CalculateTotals();
    }

    //Creating a transaction class with some properties
    public class Transaction
    {
        public string Description { get; set; }
        public DateTime Date { get; set; }
        public decimal Amount { get; set; }
        public string Type { get; set; } // Income, Expense, Debt
    }

    //Declaring some fields
    private Transaction newTransaction = new Transaction(); //Transaction class object
    private bool showModal = false; //a boolean value that determines wheather to show add transaction modal form or not

    //These fields are meant to hold the total values after CalculateTotals() method is called.
    private decimal totalIncome;
    private decimal totalExpense;
    private decimal totalDebt;

    // Property to calculate available balance
    private decimal availableBalance => totalIncome - totalExpense - totalDebt;

    /* Declaring and assigning value to a LIST of type Transaction. These values are set by default.
    The new values from modal form will get appended to last index of this list */
    private List<Transaction> transactions = new List<Transaction>()
    {
        new Transaction { Description = "Grocery Shopping", Date = DateTime.Parse("2024-12-25"), Amount = 150, Type = "Expense" },
        new Transaction { Description = "Freelance Payment", Date = DateTime.Parse("2024-12-24"), Amount = 500, Type = "Income" },
        new Transaction { Description = "Borrowed from Someone", Date = DateTime.Parse("2024-12-22"), Amount = 300, Type = "Debt" }
    };

    //this nethod is called when Add Transaction button from the dashboard is clicked
    private void OpenModal()
    {
        newTransaction = new Transaction();
        newTransaction.Date = DateTime.Now;
        showModal = true;
    }

    //This method can be called anytime we need to get total amt of each transaction type.
    private void CalculateTotals()
    {
        //LINQ method used with lamda expressions and extension methods
        totalIncome = transactions
            .Where(t => t.Type == "Income")
            .Sum(t => t.Amount);

        //TASK NO 1:*** use these totalExpense and totalDebt values instead of static HTML values
        totalExpense = transactions
            .Where(t => t.Type == "Expense")
            .Sum(t => t.Amount);

        totalDebt = transactions
            .Where(t => t.Type == "Debt")
            .Sum(t => t.Amount);
    }


    //this method is called to close the form modal
    private void CloseModal()
    {
        showModal = false;
    }

    //This method gets called from the modal button "Add"
    private void AddTransaction()
    {

        if (newTransaction != null && !string.IsNullOrWhiteSpace(newTransaction.Description))
        {
            transactions.Add(new Transaction
                {
                    Description = newTransaction.Description,
                    Date = newTransaction.Date == default ? DateTime.Now : newTransaction.Date,
                    Amount = newTransaction.Amount,
                    Type = newTransaction.Type
                });
            CalculateTotals(); // Update totals everytime after adding a new transaction.
        }
        CloseModal();
    }
}